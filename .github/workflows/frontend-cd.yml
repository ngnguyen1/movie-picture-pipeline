name: Frontend Continuous Deployment

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - closed
    branches:
      - main
    paths:
      - "starter/frontend/**"
  push:
    branches:
      - development

env:
  REPOSITORY: frontend
  IMAGE_TAG: latest

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Perform cache Node.js before install deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: npm-

      - name: Install deps
        run: npm ci --ignore-scripts

      - name: Run lint
        run: npm run lint -- --fix

  test:
    name: Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Perform cache Node.js before install deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: npm-

      - name: Install deps
        run: npm ci --ignore-scripts

      - run: npm test

  build:
    runs-on: ubuntu-latest
    environment: Staging
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Registry: $REGISTRY"
          echo "Repository: $REPOSITORY"
          echo "Image Tag: $IMAGE_TAG"
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "Extenal IP: $EXTERNALIP"
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  # deploy: